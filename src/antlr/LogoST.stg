group LogoTree;

jasminFile(filename, instructions, locals, stack) ::= <<
; public class Main extends Object { ...}
.source <filename>
.class public Main
.super java/lang/Object

; public Main() { super(); } // calls java.lang.Object()
.method public ()V
   aload_0
   invokenonvirtual java/lang/Object/()V
   return
.end method

; main(): Expr.g will generate bytecode in this method
.method public static main([Ljava/lang/String;)V
   .limit stack <stack> ; how much stack space do we need?
   .limit locals <locals> ; how many locals do we need?

   <instructions; separator="\n">

   return
.end method
>>
// END:file

line(line,v) ::= <<
.line <line>
<v>
>>

// START:stat
assign(varNum,v,descr,id) ::= <<
<v>

istore <varNum> ; <id>
>>

write(it) ::= <<
<it>
>>

exprStat(v, descr) ::= <<
<v> ; compute <descr>
>>
// END:stat

/******************************
 *       ADD
 ******************************/
add(a,b,float) ::= <<

<a>
<b>

<if (float)>
fadd
<else>
iadd
<endif>

>>

/******************************
 *       SUBTRACT
 ******************************/
sub(a,b,float) ::= <<
<a>
<b>

<if (float)>
fsub
<else>
isub
<endif>

>>

/******************************
 *       MULTIPLY
 ******************************/
mult(a,b,float) ::= <<
<a>
<b>

<if (float)>
fmul
<else>
imul
<endif>
>>


/******************************
 *       DIVIDE
 ******************************/
div(a,b,float) ::= <<
<a>
<b>

<if (float)>
fdiv
<else>
idiv
<endif>
>>

/******************************
 *       LOAD CONSTANT
 ******************************/
ldc(value) ::= <<
ldc <value>
>>

/******************************
 *       STORE VALUE
 ******************************/
var(id, varNum) ::= <<
iload <varNum> ; <id>
>>


/******************************
 *       PRINT
 ******************************/
print(class) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
invokevirtual java/io/PrintStream/print(<class>)V
>>

println() ::= <<
getstatic     java/lang/System/out Ljava/io/PrintStream;
invokevirtual java/io/PrintStream/println()V
>>