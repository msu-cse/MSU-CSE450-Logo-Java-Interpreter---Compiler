group LogoTree;

jasminFile(filename, block, locals, stack) ::= <<
; public class Main extends Object { ...}
.source <filename>
.class public Main
.super java/lang/Object

; public Main() { super(); } // calls java.lang.Object()
.method public ()V
   aload_0
   invokenonvirtual java/lang/Object/()V
   return
.end method

; main(): Expr.g will generate bytecode in this method
.method public static main([Ljava/lang/String;)V
   .limit stack <stack> ; how much stack space do we need?
   .limit locals <locals> ; how many locals do we need?

   <block; separator="\n">

   return
.end method
>>
// END:file


block(lines) ::= <<
; BLOCK
<lines; separator="\n">
>>

line(line,text,v) ::= <<


.line <line> ; <text>
    <v>
>>

// START:stat
assign(varNum,v,varName) ::= <<
<v>

istore <varNum> ; <varName>
>>

write(it) ::= <<
<it>
>>

mathDebug(v, d) ::= <<

; <d>
    <v; separator="\n">
>>
// END:stat

coerce(a) ::= <<
<a>
i2f
>>

/******************************
 *       ADD
 ******************************/
add(l,r,float,cr,cl) ::= <<
<l>
<cl>
<r>
<cr>

<if (float)>
fadd
<else>
iadd
<endif>
>>

/******************************
 *       SUBTRACT
 ******************************/
sub(l,r,float,cr,cl) ::= <<
<l>
<cl>
<r>
<cr>

<if (float)>
fsub
<else>
isub
<endif>
>>

/******************************
 *       MULTIPLY
 ******************************/
mult(l,r,float,cr,cl) ::= <<
<l>
<cl>
<r>
<cr>

<if (float)>
fmul
<else>
imul
<endif>
>>


/******************************
 *       DIVIDE
 ******************************/
div(l,r,float,cr,cl) ::= <<
<l>
<cl>
<r>
<cr>

<if (float)>
fdiv
<else>
idiv
<endif>
>>

/******************************
 *       LOAD CONSTANT
 ******************************/
ldc(value) ::= <<
ldc <value>
>>

/******************************
 *       STORE VALUE
 ******************************/
var(varName, varNum, float, int) ::= <<
<if (float)>
float <varNum> ; <varName>
<endif>
<if (int)>
iload <varNum> ; <varName>
<endif>
>>


/******************************
 *       PRINT
 ******************************/
print(class,v) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<v>
invokevirtual java/io/PrintStream/print(<class>)V
>>

println(before) ::= <<
<before; separator="\n">
getstatic     java/lang/System/out Ljava/io/PrintStream;
invokevirtual java/io/PrintStream/println()V
>>